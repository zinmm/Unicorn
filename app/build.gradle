apply plugin: "com.android.application"

Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {

        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        // 开启 jackOptions 以使用 jdk 8
//        jackOptions {
//            enabled true
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android {
        useLibrary "org.apache.http.legacy"
    }
    buildToolsVersion '28.0.3'
}

repositories {

    maven {
        url "http://maven.aliyun.com/nexus/content/repositories/releases"
    }

    flatDir {
        dirs 'libs'
    }
    google()
}

ext {
    okhttpVersion = "3.7.0"
    supportLibVersion = "28.0.0"
    rxVersion = "2.0.1"
    rxPreferencesVersion = "2.0.0-RC1"
    retrofit2Version = "2.2.0"
    gsonVersion = "2.8.0"
    eventBusVersion = "3.0.0"
    butterknifeVersion = "8.8.1"
    junitVersion = "4.12"
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation "junit:junit:${junitVersion}"

    // okHttp 网络框架
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"

    // v7 包
    api "com.android.support:appcompat-v7:${supportLibVersion}"

    // 注解
    implementation 'com.android.support:support-annotations:28.0.0@jar'
    api "com.android.support:support-annotations:28.0.0@jar"

    // design 自带
    api "com.android.support:design:${supportLibVersion}"

    // rx java
    api "io.reactivex.rxjava2:rxjava:${rxVersion}"

    // rx Android
    api "io.reactivex.rxjava2:rxandroid:${rxVersion}"

    // rx adapter
//    api "com.squareup.retrofit2:adapter-rxjava:${rxVersion}"

    // retrofit 网络框架
    api "com.squareup.retrofit2:retrofit:${retrofit2Version}"

    // rx lifecycle
//    api "com.trello.rxlifecycle2:rxlifecycle:${retrofit2Version}"

    // g son 解析 json
    api "com.squareup.retrofit2:converter-gson:${retrofit2Version}"

    // rx preferences 存文件
    api "com.f2prateek.rx.preferences2:rx-preferences:${rxPreferencesVersion}"

    // google 推出的 gson
    api "com.google.code.gson:gson:${gsonVersion}"

    // event bus callback
    api "org.greenrobot:eventbus:${eventBusVersion}"

    // butter knife
    api "com.jakewharton:butterknife:${butterknifeVersion}"

    // glide 图片加载框架
    api 'com.github.bumptech.glide:glide:4.6.0'

    api 'com.android.support.constraint:constraint-layout:1.1.3'

    // 阿里热修复
    api 'com.aliyun.ams:alicloud-android-hotfix:3.0.5'
    api('com.aliyun.ams:alicloud-android-hotfix:3.0.5') {
        exclude(module: 'alicloud-android-utdid')
    }

    // 检查栈顶应用的
//    api project(path: ':runningapplication')

    // 侧滑菜单
//    api project(path: ':module:sideslip')

    // 工具类
    api project(path: ':toolutils')

    // system control
    api project(path: ':brain')

    // 网络模块
    api project(path: ':network')

    // butter knife
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterknifeVersion}"
}

